%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2369 888
%%HiResBoundingBox: 0 0 2368.0798 888
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2368.0798 888 re
W
q
[0.24 0 0 -0.24 0 888] cm
q
0 0 9866.667 3699.219 re
W*
q
[24.666544 0 0 24.661459 246.68999 246.61458] cm
10 0 m
370 0 l
370.32751 0 370.65424 0.016051 370.98019 0.048153 c
371.30609 0.080255 371.62967 0.128253 371.95087 0.192147 c
372.27209 0.256042 372.58942 0.335525 372.9028 0.430597 c
373.21622 0.525668 373.5242 0.635871 373.82678 0.761205 c
374.12936 0.886538 374.42508 1.026399 374.71393 1.180787 c
375.00278 1.335175 375.28336 1.503348 375.55566 1.685304 c
375.828 1.86726 376.09076 2.062124 376.34393 2.269896 c
376.59711 2.477667 376.83948 2.697346 377.07104 2.928932 c
377.30264 3.160518 377.52231 3.402896 377.73007 3.656067 c
377.93787 3.909237 378.13272 4.171981 378.31464 4.444297 c
378.49661 4.716614 378.66479 4.997192 378.81918 5.286032 c
378.97357 5.574872 379.11343 5.870583 379.23877 6.173165 c
379.36411 6.475747 379.47433 6.783743 379.5694 7.097153 c
379.66449 7.410563 379.74396 7.727877 379.80783 8.049096 c
379.87177 8.370316 379.91977 8.693893 379.95187 9.019829 c
379.98395 9.345764 380 9.672488 380 10 c
380 120 l
380 120.327522 379.98395 120.654243 379.95187 120.980179 c
379.91977 121.306107 379.87177 121.629677 379.80783 121.95089 c
379.74396 122.27211 379.66449 122.589432 379.5694 122.902847 c
379.47433 123.216255 379.36411 123.524246 379.23877 123.826828 c
379.11343 124.129417 378.97357 124.425125 378.81918 124.713966 c
378.66479 125.002808 378.49661 125.283386 378.31464 125.555702 c
378.13272 125.828026 377.93787 126.090775 377.73007 126.343948 c
377.52231 126.597115 377.30264 126.839493 377.07104 127.071068 c
376.83948 127.302658 376.59711 127.522339 376.34393 127.73011 c
376.09076 127.937881 375.828 128.132736 375.55566 128.314682 c
375.28336 128.496643 375.00278 128.664825 374.71393 128.819214 c
374.42508 128.973602 374.12936 129.113464 373.82678 129.238785 c
373.5242 129.36412 373.21622 129.474319 372.90283 129.569382 c
372.58942 129.664459 372.27209 129.743942 371.95087 129.807831 c
371.62967 129.871735 371.30609 129.919739 370.98019 129.951828 c
370.65424 129.983948 370.32751 130 370 130 c
10 130 l
9.672488 130 9.345764 129.983948 9.019829 129.951828 c
8.693893 129.919739 8.370316 129.871735 8.049096 129.807831 c
7.727877 129.743942 7.410563 129.664459 7.097153 129.569397 c
6.783743 129.474319 6.475747 129.36412 6.173165 129.238785 c
5.870583 129.113464 5.574873 128.973602 5.286033 128.819229 c
4.997192 128.664841 4.716614 128.496658 4.444297 128.314697 c
4.171981 128.132736 3.909237 127.937881 3.656067 127.73011 c
3.402896 127.522339 3.160518 127.302658 2.928932 127.071068 c
2.697346 126.839493 2.477667 126.597115 2.269896 126.343941 c
2.062124 126.090775 1.86726 125.828026 1.685304 125.555695 c
1.503348 125.283386 1.335176 125.002808 1.180787 124.713966 c
1.026399 124.425125 0.886538 124.129417 0.761205 123.826828 c
0.635871 123.524246 0.525668 123.216248 0.430597 122.90284 c
0.335525 122.589432 0.256042 122.27211 0.192147 121.95089 c
0.128253 121.629677 0.080255 121.306107 0.048153 120.980171 c
0.016051 120.654243 0 120.327522 0 120 c
0 10 l
0 9.672488 0.016051 9.345764 0.048153 9.019829 c
0.080255 8.693893 0.128253 8.370316 0.192147 8.049096 c
0.256042 7.727877 0.335525 7.410563 0.430597 7.097153 c
0.525668 6.783743 0.635871 6.475747 0.761205 6.173165 c
0.886538 5.870583 1.026399 5.574873 1.180787 5.286033 c
1.335175 4.997192 1.503348 4.716614 1.685304 4.444297 c
1.86726 4.171981 2.062124 3.909237 2.269896 3.656067 c
2.477667 3.402896 2.697346 3.160518 2.928932 2.928932 c
3.160518 2.697346 3.402896 2.477667 3.656067 2.269896 c
3.909237 2.062124 4.171981 1.86726 4.444297 1.685304 c
4.716614 1.503348 4.997192 1.335176 5.286032 1.180787 c
5.574872 1.026399 5.870583 0.886538 6.173165 0.761205 c
6.475747 0.635871 6.783743 0.525668 7.097153 0.430597 c
7.410563 0.335525 7.727877 0.256042 8.049096 0.192147 c
8.370316 0.128253 8.693893 0.080255 9.019829 0.048153 c
9.345764 0.016051 9.672488 0 10 0 c
h
f
Q
q
[5.270629 0 0 5.269543 624.06702 500.60654] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
321.71399 340 m
321.008 340 320.30298 339.81201 319.67499 339.44101 c
318.45898 338.72 317.71399 337.41299 317.71399 336 c
317.71399 295 l
36 295 l
33.791 295 32 293.20901 32 291 c
32 288.79099 33.791 287 36 287 c
321.71399 287 l
323.923 287 325.71399 288.79099 325.71399 291 c
325.71399 329.24799 l
477.67499 246 l
325.71399 162.751999 l
325.71399 201 l
325.71399 203.209 323.923 205 321.71399 205 c
91.713989 205 l
89.50499 205 87.713989 203.209 87.713989 201 c
87.713989 198.791 89.50499 197 91.713989 197 c
317.71399 197 l
317.71399 156 l
317.71399 154.587006 318.45898 153.279007 319.67499 152.559006 c
320.89099 151.839005 322.39697 151.813004 323.63599 152.492004 c
487.922 242.492 l
489.203 243.194 490 244.539 490 246 c
490 247.461 489.203 248.806 487.922 249.508 c
323.63599 339.508 l
323.03601 339.836 322.375 340 321.71399 340 c
h
f
256 250 m
26 250 l
23.791 250 22 248.209 22 246 c
22 243.791 23.791 242 26 242 c
256 242 l
258.20901 242 260 243.791 260 246 c
260 248.209 258.20901 250 256 250 c
h
f
256 490 m
193.49701 490 134.734009 465.66 90.537003 421.46301 c
46.34 377.26801 22 318.504 22 256 c
22 193.49701 46.34 134.734009 90.537003 90.537003 c
134.733994 46.34 193.49699 22 256 22 c
318.504 22 377.267 46.34 421.46301 90.537003 c
465.66 134.733994 490 193.49699 490 256 c
490 318.504 465.66 377.26801 421.46301 421.46301 c
377.267 465.66 318.504 490 256 490 c
h
256 30 m
131.382996 30 30 131.382996 30 256 c
30 380.617 131.382996 482 256 482 c
380.617 482 482 380.617 482 256 c
482 131.382996 380.617 30 256 30 c
h
f
256 490 m
193.49701 490 134.734009 465.66 90.537003 421.46301 c
46.34 377.26801 22 318.504 22 256 c
22 193.49701 46.34 134.734009 90.537003 90.537003 c
134.733994 46.34 193.49699 22 256 22 c
318.504 22 377.267 46.34 421.46301 90.537003 c
465.66 134.733994 490 193.49699 490 256 c
490 318.504 465.66 377.26801 421.46301 421.46301 c
377.267 465.66 318.504 490 256 490 c
h
256 30 m
131.382996 30 30 131.382996 30 256 c
30 380.617 131.382996 482 256 482 c
380.617 482 482 380.617 482 256 c
482 131.382996 380.617 30 256 30 c
h
f
256 490 m
210.188 490 168.323 442.90701 146.742004 367.10199 c
140.440002 344.96298 136.094009 321.164 133.825012 296.366 c
133.624008 294.16599 135.244019 292.22 137.444016 292.01801 c
139.641022 291.80701 141.590012 293.436 141.792023 295.63699 c
144.016022 319.94199 148.27002 343.24899 154.437027 364.909 c
174.998 437.134 213.91499 482 256 482 c
298.08701 482 337.004 437.13199 357.565 364.90399 c
362.01401 349.26898 365.49802 332.629 367.91501 315.44299 c
368.22302 313.255 370.25101 311.73199 372.43301 312.039 c
374.621 312.34799 376.14502 314.36899 375.83701 316.55701 c
373.36902 334.10602 369.811 351.11002 365.259 367.09601 c
343.67899 442.905 301.81299 490 256 490 c
h
f
140.128998 200 m
139.942993 200 139.755997 199.987 139.567001 199.96001 c
137.378998 199.65201 135.856003 197.63 136.162994 195.442 c
138.628998 177.89999 142.187988 160.895996 146.740997 144.904007 c
168.321 69.094002 210.187 22 256 22 c
301.81299 22 343.67999 69.096001 365.26001 144.90799 c
368.035 154.656982 370.46002 164.861984 372.46902 175.23898 c
372.88904 177.40799 371.47104 179.50699 369.30203 179.92699 c
367.13904 180.34599 365.03503 178.92899 364.61502 176.75998 c
362.64902 166.606979 360.27701 156.626984 357.56503 147.097977 c
337.005 74.869003 298.08701 30 256 30 c
213.91299 30 174.996 74.867996 154.434998 147.095001 c
149.983002 162.735001 146.5 179.377 144.084991 196.55701 c
143.804001 198.556 142.091003 200 140.128998 200 c
h
f
256 200 m
253.791 200 252 198.209 252 196 c
252 26 l
252 23.791 253.791 22 256 22 c
258.20898 22 260 23.791 260 26 c
260 196 l
260 198.209 258.20901 200 256 200 c
h
f
256 490 m
253.791 490 252 488.20901 252 486 c
252 296 l
252 293.79099 253.791 292 256 292 c
258.20898 292 260 293.79099 260 296 c
260 486 l
260 488.20901 258.20901 490 256 490 c
h
f
Q
q
[31.124619 0 0 31.1182 3629.0422 707.01904] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
20.32 27.440001 m
22.08 28.68 23.119999 30.52 23.119999 32.68 c
23.119999 36.84 19.279999 40 15.279999 40 c
2.279999 40 l
2.279999 15.520001 l
14.479999 15.520001 l
17.679998 15.520001 20.32 17.24 21.719997 20.08 c
22.119997 21 22.319998 21.92 22.319998 22.879999 c
22.319998 24.679998 21.599998 26.16 20.319998 27.439999 c
20.32 27.440001 l
h
8.28 21.08 m
8.28 25 l
14.48 25 l
15.52 25 16.32 24 16.32 23 c
16.32 21.959999 15.56 21.08 14.48 21.08 c
8.28 21.08 l
h
8.28 30.559999 m
8.28 34.439999 l
15.28 34.439999 l
16.360001 34.439999 17.119999 33.559998 17.119999 32.519997 c
17.119999 31.999996 16.919998 31.519997 16.56 31.119997 c
16.199999 30.759996 15.759999 30.559998 15.28 30.559998 c
8.28 30.559998 l
8.28 30.559999 l
h
39.172001 34.639999 m
43.532001 34.639999 45.771999 31.84 45.771999 27.759998 c
45.771999 23.439999 43.371998 20.879997 39.172001 20.879997 c
34.771999 20.879997 32.572002 23.679996 32.572002 27.759998 c
32.572002 31.999998 35.012001 34.639999 39.172001 34.639999 c
h
39.172001 40.200001 m
31.652 40.200001 26.572001 35.080002 26.572001 27.760002 c
26.572001 20.200003 31.892 15.320003 39.172001 15.320003 c
46.732002 15.320003 51.772003 20.400002 51.772003 27.760002 c
51.772003 35.360001 46.492004 40.200001 39.172005 40.200001 c
39.172001 40.200001 l
h
71.984001 15.520001 m
77.984001 15.520001 l
77.984001 40 l
71.984001 40 l
62.384003 25.68 l
62.384003 40 l
56.384003 40 l
56.384003 15.520001 l
62.384003 15.520001 l
71.984001 29.84 l
71.984001 15.520001 l
h
82.036003 15.520001 m
102.436005 15.520001 l
102.436005 21.08 l
95.236008 21.08 l
95.236008 40 l
89.236008 40 l
89.236008 21.08 l
82.036011 21.08 l
82.036011 15.520001 l
82.036003 15.520001 l
h
106.447998 15.520001 m
124.647995 15.520001 l
124.647995 21.08 l
112.447998 21.08 l
112.447998 25 l
122.248001 25 l
122.248001 30.559999 l
112.447998 30.559999 l
112.447998 34.439999 l
124.647995 34.439999 l
124.647995 40 l
106.447998 40 l
106.447998 15.520001 l
h
128.940002 15.520001 m
134.940002 15.520001 l
134.940002 27 l
142.820007 15.520001 l
150.26001 15.520001 l
141.700012 27.76 l
150.580017 40 l
143.220016 40 l
134.940018 28.48 l
134.940018 40 l
128.940018 40 l
128.940018 15.520001 l
128.940002 15.520001 l
h
168.312 35.040001 m
159.311996 35.040001 l
157.552002 40 l
151.031998 40 l
160.832001 15.520001 l
166.832001 15.520001 l
176.632 40 l
170.07201 40 l
168.312 35.040001 l
h
161.272003 29.48 m
166.352005 29.48 l
163.832001 22.360001 l
161.272003 29.48 l
h
f
Q
q
[21.716572 0 0 21.712093 4523.6763 2071.2573] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
4.7559 17.4121 m
9.1797 17.4121 l
9.1797 20 l
1.8262 20 l
1.8262 5.889 l
4.7559 5.889 l
4.7559 17.411999 l
4.7559 17.4121 l
h
29.018583 20.195311 m
24.868183 20.195311 21.801783 17.36331 21.801783 12.939411 c
21.801783 8.505812 24.868183 5.693311 29.018583 5.693311 c
33.159184 5.693311 36.225582 8.505812 36.225582 12.939411 c
36.225582 17.363211 33.159184 20.195311 29.018581 20.195311 c
29.018583 20.195311 l
h
29.018583 17.5098 m
31.450184 17.5098 33.315483 15.8008 33.315483 12.9395 c
33.315483 10.0879 31.450283 8.388701 29.018583 8.388701 c
26.586884 8.388701 24.721684 10.0879 24.721684 12.939501 c
24.721684 15.8008 26.586884 17.5098 29.018583 17.5098 c
h
56.376965 20.195311 m
52.304665 20.195311 49.306664 17.382811 49.306664 12.97851 c
49.306664 8.51561 52.373062 5.69331 56.523464 5.69331 c
59.248062 5.69331 61.503963 6.89451 62.734364 9.01361 c
60.165962 10.38081 l
59.423771 8.93551 58.095661 8.242109 56.523361 8.242109 c
54.081963 8.242109 52.246063 9.921809 52.246063 12.91011 c
52.246063 15.79101 53.964863 17.64641 56.630863 17.64641 c
58.437462 17.64641 60.097664 16.747971 60.498062 14.68741 c
56.640663 14.68741 l
56.640663 12.33391 l
63.271564 12.33391 l
63.271564 19.99991 l
60.966866 19.99991 l
60.966866 18.04681 l
60.058666 19.38471 58.535267 20.19521 56.377068 20.19521 c
56.376965 20.195311 l
h
77.661163 20 m
77.661163 5.889 l
80.590866 5.889 l
80.590866 20 l
77.661163 20 l
h
100.273468 20.195311 m
97.24617 20.195311 94.882866 18.740211 94.453171 16.09371 c
97.480469 15.40035 l
97.675781 16.982349 98.837868 17.80265 100.390671 17.80265 c
101.582069 17.80265 102.529373 17.275311 102.519569 16.083851 c
102.509804 14.755751 100.947266 14.335851 99.228569 13.808451 c
97.158272 13.16392 94.941467 12.402151 94.941467 9.80455 c
94.941467 7.17755 97.089867 5.69325 99.921967 5.69325 c
102.402466 5.69325 104.902466 6.69915 105.468864 9.40415 c
102.636864 10.10728 l
102.373192 8.700979 101.425964 8.085779 100.097763 8.085779 c
98.916161 8.085779 97.910263 8.57406 97.910263 9.736179 c
97.910263 10.820179 99.296967 11.18148 100.89856 11.659979 c
103.027458 12.304509 105.546959 13.124779 105.546959 15.937279 c
105.546959 18.93528 103.037155 20.19508 100.27356 20.19508 c
100.273468 20.195311 l
h
127.788322 5.889 m
127.788322 8.4671 l
124.438721 8.4671 l
124.438721 20.000099 l
121.538322 20.000099 l
121.538322 8.467099 l
118.16922 8.467099 l
118.16922 5.888999 l
127.788322 5.888999 l
127.788322 5.889 l
h
141.357452 20 m
141.357452 5.889 l
144.287155 5.889 l
144.287155 20 l
141.357452 20 l
h
165.532257 20.195311 m
161.381851 20.195311 158.31546 17.373011 158.31546 12.939411 c
158.31546 8.505812 161.381866 5.693311 165.532257 5.693311 c
168.67676 5.693311 171.19635 7.304611 172.20216 9.980412 c
169.46776 10.976502 l
168.84276 9.335901 167.348663 8.388601 165.532257 8.388601 c
163.100662 8.388601 161.235352 10.087801 161.235352 12.939402 c
161.235352 15.791002 163.100555 17.499901 165.532257 17.499901 c
167.348663 17.499901 168.84276 16.542872 169.46776 14.902201 c
172.20216 15.898291 l
171.19626 18.574091 168.67676 20.19519 165.532257 20.19519 c
165.532257 20.195311 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
